import * as monaco from "monaco-editor";

const cppKeywords = [
  "alignas",
  "alignof",
  "and",
  "and_eq",
  "asm",
  "auto",
  "bitand",
  "bitor",
  "bool",
  "break",
  "case",
  "catch",
  "char",
  "char16_t",
  "char32_t",
  "char8_t",
  "class",
  "compl",
  "const",
  "const_cast",
  "constexpr",
  "constinit",
  "continue",
  "decltype",
  "default",
  "delete",
  "do",
  "double",
  "dynamic_cast",
  "else",
  "enum",
  "explicit",
  "export",
  "extern",
  "false",
  "float",
  "for",
  "friend",
  "goto",
  "if",
  "inline",
  "int",
  "long",
  "mutable",
  "namespace",
  "new",
  "noexcept",
  "not",
  "not_eq",
  "nullptr",
  "operator",
  "or",
  "or_eq",
  "private",
  "protected",
  "public",
  "register",
  "reinterpret_cast",
  "requires",
  "return",
  "short",
  "signed",
  "sizeof",
  "static",
  "static_assert",
  "static_cast",
  "struct",
  "switch",
  "template",
  "this",
  "thread_local",
  "throw",
  "true",
  "try",
  "typedef",
  "typeid",
  "typename",
  "union",
  "unsigned",
  "using",
  "virtual",
  "void",
  "volatile",
  "wchar_t",
  "while",
  "xor",
  "xor_eq",
];

const cppAPIs = [
  "std::cout",
  "std::cin",
  "std::endl",
  "std::string",
  "std::vector",
  "std::map",
  "std::list",
  "std::set",
  "std::unordered_map",
  "std::unordered_set",
  "std::shared_ptr",
  "std::unique_ptr",
  "std::make_shared",
  "std::make_unique",
  "std::move",
  "std::forward",
  "std::pair",
  "std::tuple",
  "std::function",
  "std::bind",
  "std::thread",
  "std::mutex",
  "std::lock_guard",
  "std::shared_lock",
  "std::atomic",
  "std::future",
  "std::promise",
  "std::packaged_task",
  "std::async",
  "std::conditional",
  "std::enable_if",
  "std::is_same",
  "std::is_base_of",
  "std::is_convertible",
  "std::remove_reference",
  "std::add_pointer",
  "std::decay",
  "std::result_of",
  "std::is_integral",
  "std::is_floating_point",
  "std::is_array",
  "std::is_pointer",
  "std::is_lvalue_reference",
  "std::is_rvalue_reference",
  "std::is_member_function_pointer",
  "std::is_member_object_pointer",
  "std::is_enum",
  "std::is_union",
  "std::is_class",
  "std::is_function",
  "std::is_object",
  "std::is_scalar",
  "std::is_compound",
  "std::is_reference",
  "std::is_arithmetic",
  "std::is_fundamental",
  "std::is POD",
  "std::is_literal_type",
  "std::is_standard_layout",
  "std::is_trivial",
  "std::is_trivially_copyable",
  "std::is_empty",
  "std::is_polymorphic",
  "std::is_abstract",
  "std::is_final",
  "std::is_sealed",
  "std::is_aggregate",
  "std::has_unique_object_representations",
  "std::alignment_of",
  "std::rank",
  "std::extent",
  "std::remove_extent",
  "std::remove_all_extents",
  "std::remove_pointer",
  "std::add_pointer",
  "std::remove_reference",
  "std::add_reference",
  "std::add_lvalue_reference",
  "std::add_rvalue_reference",
  "std::remove_cv",
  "std::add_cv",
  "std::add_const",
  "std::add_volatile",
  "std::remove_const",
  "std::remove_volatile",
  "std::make_signed",
  "std::make_unsigned",
  "std::underlying_type",
  "std::common_type",
  "std::conditional",
  "std::decay",
  "std::result_of",
  "std::is_constructible",
  "std::is_trivially_constructible",
  "std::is_nothrow_constructible",
  "std::is_default_constructible",
  "std::is_trivially_default_constructible",
  "std::is_nothrow_default_constructible",
  "std::is_copy_constructible",
  "std::is_trivially_copy_constructible",
  "std::is_nothrow_copy_constructible",
  "std::is_move_constructible",
  "std::is_trivially_move_constructible",
  "std::is_nothrow_move_constructible",
  "std::is_assignable",
  "std::is_trivially_assignable",
  "std::is_nothrow_assignable",
  "std::is_copy_assignable",
  "std::is_trivially_copy_assignable",
  "std::is_nothrow_copy_assignable",
  "std::is_move_assignable",
  "std::is_trivially_move_assignable",
  "std::is_nothrow_move_assignable",
  "std::is_destructible",
  "std::is_trivially_destructible",
  "std::is_nothrow_destructible",
  "std::has_virtual_destructor",
  "std::is_trivially_copyable",
  "std::is_standard_layout",
  "std::is_pod",
  "std::is_literal_type",
  "std::is_empty",
  "std::is_polymorphic",
  "std::is_abstract",
  "std::is_final",
  "std::is_sealed",
  "std::is_aggregate",
  "std::is_trivial",
  "std::is_trivially_copyable",
  "std::is_standard_layout",
  "std::is_pod",
  "std::is_literal_type",
  "std::is_empty",
  "std::is_polymorphic",
  "std::is_abstract",
  "std::is_final",
  "std::is_sealed",
  "std::is_aggregate",
  "std::alignment_of",
  "std::rank",
  "std::extent",
  "std::remove_extent",
  "std::remove_all_extents",
  "std::remove_pointer",
  "std::add_pointer",
  "std::remove_reference",
  "std::add_reference",
  "std::add_lvalue_reference",
  "std::add_rvalue_reference",
  "std::remove_cv",
  "std::add_cv",
  "std::add_const",
  "std::add_volatile",
  "std::remove_const",
  "std::remove_volatile",
  "std::make_signed",
  "std::make_unsigned",
  "std::underlying_type",
  "std::common_type",
  "std::conditional",
  "std::decay",
  "std::result_of",
  "std::is_constructible",
  "std::is_trivially_constructible",
  "std::is_nothrow_constructible",
  "std::is_default_constructible",
  "std::is_trivially_default_constructible",
  "std::is_nothrow_default_constructible",
  "std::is_copy_constructible",
  "std::is_trivially_copy_constructible",
  "std::is_nothrow_copy_constructible",
  "std::is_move_constructible",
  "std::is_trivially_move_constructible",
  "std::is_nothrow_move_constructible",
  "std::is_assignable",
  "std::is_trivially_assignable",
  "std::is_nothrow_assignable",
  "std::is_copy_assignable",
  "std::is_trivially_copy_assignable",
  "std::is_nothrow_copy_assignable",
  "std::is_move_assignable",
  "std::is_trivially_move_assignable",
  "std::is_nothrow_move_assignable",
  "std::is_destructible",
  "std::is_trivially_destructible",
  "std::is_nothrow_destructible",
  "std::has_virtual_destructor",
];
function createCompleter(getExtraHints) {
  const createSuggestions = function (model, textUntilPosition) {
    let text = model.getValue();
    textUntilPosition = textUntilPosition
      .replace(/[*[]@$()]/g, "")
      .replace(/(s+|.)/g, " ");
    let arr = textUntilPosition.split(/[s;]/);
    let activeStr = arr[arr.length - 1];
    let len = activeStr.length;
    let rexp = new RegExp("([^\\w]|^)" + activeStr + "\\w*", "gim");
    let match = text.match(rexp);
    let textHints = !match
      ? []
      : match.map((ele) => {
          let rexp = new RegExp(activeStr, "gim");
          let search = ele.search(rexp);
          return ele.substr(search);
        });
    let mergeHints = Array.from(
      new Set([...cppKeywords, ...textHints, ...getExtraHints(model)])
    )
      .sort()
      .filter((ele) => {
        let rexp = new RegExp(ele.substr(0, len), "gim");
        return (match && match.length === 1 && ele === activeStr) ||
          ele.length === 1
          ? false
          : activeStr.match(rexp);
      });
    return mergeHints.map((ele) => ({
      label: ele,
      kind:
        cppKeywords.indexOf(ele) > -1
          ? monaco.languages.CompletionItemKind.Keyword
          : monaco.languages.CompletionItemKind.Text,
      documentation: ele,
      insertText: ele,
    }));
  };
  return {
    provideCompletionItems(model, position) {
      // 获取当前光标位置的上下文
      var word = model.getWordUntilPosition(position);
      var range = {
        startLineNumber: position.lineNumber,
        endLineNumber: position.lineNumber,
        startColumn: word.startColumn,
        endColumn: word.endColumn,
      };

      // 创建补全项
      var suggestions = [];
      cppKeywords.forEach(function (keyword) {
        suggestions.push({
          label: keyword,
          kind: monaco.languages.CompletionItemKind.Keyword,
          detail: "C++ Keyword",
          documentation: "C++ Keyword",
          insertText: keyword,
          range: range,
        });
      });

      cppAPIs.forEach(function (api) {
        suggestions.push({
          label: api,
          kind: monaco.languages.CompletionItemKind.Function,
          detail: "C++ API",
          documentation: "C++ Standard Library API",
          insertText: api,
          range: range,
        });
      });

      return { suggestions: suggestions };
    },
  };
}
export default createCompleter;
